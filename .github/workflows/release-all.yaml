on:
  push:
    tags:
      - "release-v*"

name: Create Release

jobs:
  build-ubuntu:
    name: Create Release Binary
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{github.workspace}}/build -DACTIONS=TRUE

      - name: Install Boost Lib
        run: sudo apt install libboost-dev; sudo apt install libboost-all-dev; sudo apt install libcurl4-openssl-dev

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{github.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: cmake ../vimeo_download/CMakeLists.txt -DCMAKE_BUILD_TYPE=$BUILD_TYPE

      - name: Build
        working-directory: ${{github.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build ../vimeo_download  --prefix ${{github.workspace}}/build --config $BUILD_TYPE

      - name: zipping
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: zip ${{github.workspace}}/vimeo_download/download_vimeo_ubuntu.zip ${{github.workspace}}/vimeo_download/download_vimeo

      - name: save dist
        uses: actions/upload-artifact@v2
        with:
          name: download_vimeo_ubuntu.zip
          path: ${{github.workspace}}/vimeo_download/download_vimeo_ubuntu.zip

  build-windows:
    name: Create Release Binary
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{github.workspace}}/build -DACTIONS=TRUE

      - name: Install Vcpkg
        working-directory: ${{github.workspace}}/build
        run: git clone "https://github.com/microsoft/vcpkg.git"

      - name: Activate Vcpkg
        working-directory: ${{github.workspace}}/build/vcpkg
        run: |
          .\bootstrap-vcpkg.bat
          .\vcpkg integrate install

      - name: Install Boost Lib
        working-directory: ${{github.workspace}}/build/vcpkg
        run: |
          .\vcpkg install boost-program-options:x64-windows-static
          .\vcpkg install curl:x64-windows-static

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: powershell
        working-directory: ${{github.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: cmake ../vimeo_download/CMakeLists.txt -DCMAKE_BUILD_TYPE=$BUILD_TYPE

      - name: Build
        working-directory: ${{github.workspace}}/build
        shell: powershell
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build ../vimeo_download --config $BUILD_TYPE

      - name: zipping
        working-directory: ${{github.workspace}}/build
        shell: powershell
        run: powershell -Command "Compress-Archive ${{github.workspace}}\vimeo_download\Debug\download_vimeo.exe ${{github.workspace}}\vimeo_download\download_vimeo_windows.zip"

      - name: save dist
        uses: actions/upload-artifact@v2
        with:
          name: download_vimeo_windows.zip
          path: ${{github.workspace}}\vimeo_download\download_vimeo_windows.zip

  build-macos:
    name: Create Release Binary
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2

      - name: Create Build Environment
        run: cmake -E make_directory ${{github.workspace}}/build -DACTIONS=TRUE

      - name: Install Boost Lib
        run: HOMEBREW_NO_AUTO_UPDATE=1 brew install boost

      - name: Configure CMake
        shell: bash
        working-directory: ${{github.workspace}}/build
        run: cmake ../vimeo_download/CMakeLists.txt -DCMAKE_BUILD_TYPE=$BUILD_TYPE

      - name: Build
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: cmake --build ../vimeo_download --config $BUILD_TYPE

      - name: zipping
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: zip ${{github.workspace}}/vimeo_download/download_vimeo_mac.zip ${{github.workspace}}/vimeo_download/download_vimeo

      - name: save dist
        uses: actions/upload-artifact@v2
        with:
          name: download_vimeo_mac.zip
          path: ${{github.workspace}}/vimeo_download/download_vimeo_mac.zip

  publish-relase:
    name: Create All Release
    needs: [build-ubuntu, build-windows, build-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Download the artifact (Linux)
        uses: actions/download-artifact@v2
        with:
          name: download_vimeo_ubuntu.zip
          
      - name: Download the artifact (macOS)
        uses: actions/download-artifact@v2
        with:
          name: download_vimeo_mac.zip
          
      - name: Download the artifact (Windows)
        uses: actions/download-artifact@v2
        with:
          name: download_vimeo_windows.zip
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: add binray Ubuntu
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: download_vimeo_ubuntu.zip
          asset_name: download_vimeo_ubuntu.zip
          asset_content_type: application/zip
      
      - name: add binray macOS
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: download_vimeo_mac.zip
          asset_name: download_vimeo_mac.zip
          asset_content_type: application/zip
          
      - name: add binray Windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: download_vimeo_windows.zip
          asset_name: download_vimeo_windows.zip
          asset_content_type: application/zip
          
     
